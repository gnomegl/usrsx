USRSX                    Username Search Tool                    USRSX

NAME
     usrsx - username presence checker across hundreds of websites

SYNOPSIS
     usrsx [options] username...
     usrsx --self-check [options]

DESCRIPTION
     usrsx is a concurrent username enumeration tool that checks username 
     availability across hundreds of websites using the WhatsMyName dataset.
     The tool leverages browser impersonation, proxy rotation, and goroutine-
     based concurrency for high-speed enumeration.

     The core checker validates usernames against site-specific detection 
     patterns including error types, HTTP status codes, and response body 
     matching. Fuzzy mode provides additional validation flexibility.

BUILDING
     Requires Go 1.19 or later.

     From source:
         $ git clone https://github.com/gnomegl/usrsx.git
         $ cd usrsx
         $ go build -o usrsx cmd/usrsx/main.go

     Via go install:
         $ go install github.com/gnomegl/usrsx/cmd/usrsx@latest

OPTIONS
     -s, --site name
             Check only specified site(s). Multiple sites may be specified.

     -l, --local-list path
             Path to local JSON site definition file(s).

     -r, --remote-list url
             URL to fetch remote site definition list(s).

     -L, --local-schema path
             Path to local schema validation file.

     -R, --remote-schema url
             URL to fetch remote schema. Default: WhatsMyName schema.

     -S, --self-check
             Run self-check validation mode to test detection accuracy.

     -I, --include-categories category
             Include only specified categories (comma-separated).

     -E, --exclude-categories category
             Exclude specified categories (comma-separated).

     -a, --filter-all
             Display all results regardless of status.

     -e, --filter-errors
             Display only results with error status.

     -n, --filter-not-found
             Display only results where username was not found.

     -u, --filter-unknown
             Display only results with unknown status.

     -g, --filter-ambiguous
             Display only results with ambiguous status.

     -c, --csv
             Export results to CSV format (stdout).

     --csv-output path
             Export results to specified CSV file.

     -j, --json
             Export results to JSON format (stdout).

     --json-output path
             Export results to specified JSON file.

     -H, --html
             Export results to HTML format.

     -T, --html-path path
             Specify custom HTML export path.

     --pdf path
             Export results to text format at specified path.

     -p, --proxy url
             Proxy server URL. Supports http:// and socks5:// schemes.
             Format: protocol://[user:pass@]host:port

     -F, --proxy-file path
             File containing proxy servers, one per line. Tool will rotate
             through proxies automatically.

     -t, --timeout seconds
             HTTP request timeout in seconds. Default: 30.

     -A, --allow-redirects
             Follow HTTP redirects during requests.

     -V, --verify-ssl
             Enable SSL certificate verification.

     -i, --impersonate browser
             Browser to impersonate. Valid options: chrome, firefox, safari,
             edge, chrome_android, safari_ios. Default: chrome.

     -m, --max-tasks n
             Maximum concurrent goroutine tasks. Default: 50.

     -f, --fuzzy
             Enable fuzzy validation mode for broader matching.

     -d, --show-details
             Display detailed output including HTTP status and response info.

     -C, --no-color
             Disable ANSI color output.

     -P, --no-progressbar
             Disable progress bar display.

     -b, --browse
             Open found profiles in default web browser.

     -w, --save-response
             Save HTTP responses to disk for inspection.

     -W, --response-path path
             Custom directory path for saved HTTP responses.

     -o, --open-response
             Automatically open saved HTTP responses.

     --version
             Display version information and exit.

EXAMPLES
     Basic single username check:
         $ usrsx john_doe

     Check multiple usernames:
         $ usrsx alice bob charlie

     Check with Firefox browser impersonation:
         $ usrsx --impersonate firefox john_doe

     Use SOCKS5 proxy:
         $ usrsx --proxy socks5://127.0.0.1:1080 john_doe

     Use rotating proxy pool:
         $ usrsx --proxy-file proxies.txt john_doe

     Filter by category:
         $ usrsx --include-categories social,coding john_doe
         $ usrsx --exclude-categories adult,gaming john_doe

     Export to multiple formats:
         $ usrsx --csv --json --html john_doe

     High-concurrency scan with custom timeout:
         $ usrsx --max-tasks 100 --timeout 15 john_doe

     Self-check with detailed output:
         $ usrsx --self-check --show-details

     Complete example:
         $ usrsx john_doe \
             --impersonate chrome \
             --proxy-file proxies.txt \
             --max-tasks 100 \
             --timeout 15 \
             --include-categories social,coding \
             --csv --json --html \
             --show-details

FILES
     proxies.txt
             Proxy configuration file. One proxy per line. Comments with #.
             Supported formats:
                 http://proxy.example.com:8080
                 socks5://127.0.0.1:1080
                 https://user:pass@proxy.example.com:3128

ARCHITECTURE
     usrsx/
         cmd/usrsx/main.go         Entry point, CLI argument parsing
         internal/
             core/
                 checker.go        Username validation engine
                 models.go         Data structure definitions
                 constants.go      System constants and defaults
                 errors.go         Error type definitions
                 metadata.go       Site metadata handling
                 metadata_niche.go Niche site metadata
             client/
                 http.go           HTTP client with proxy rotation
             cli/
                 config.go         Configuration structures
                 exporters.go      CSV/JSON/HTML export handlers
                 progress.go       Progress tracking and display
             utils/
                 validators.go     Input validation functions
         go.mod                    Go module definition
         go.sum                    Dependency checksums

     Core modules:
         checker.go    - Implements concurrent site checking via goroutines
         http.go       - HTTP client with TLS fingerprinting and proxy support
         exporters.go  - Result serialization to multiple formats

ENVIRONMENT
     No environment variables are currently used.

DIAGNOSTICS
     Exit status is 0 on success, 1 on error.

     The tool validates:
         - Username format (alphanumeric, hyphen, underscore)
         - Proxy URL format and reachability
         - Numeric parameter ranges (timeout, max-tasks)

     Error messages are written to stderr.

PERFORMANCE
     Performance tuning guidelines:

     1. Concurrency: Increase --max-tasks for faster scans (higher values may
        trigger rate limiting). Default 50, recommended range 50-200.

     2. Timeout: Adjust based on network conditions. Default 30s. For slow
        networks use 60s or higher.

     3. Proxy rotation: Use --proxy-file to distribute load and avoid rate
        limiting. Proxies are rotated round-robin.

     4. Category filtering: Use --include-categories to reduce total checks.

SECURITY
     - SSL verification is disabled by default for compatibility
     - Proxy credentials are passed in URL (not encrypted)
     - HTTP responses may be saved to disk with --save-response
     - No credentials or sensitive data are logged by default

BUGS
     Report issues at: https://github.com/gnomegl/usrsx/issues

SEE ALSO
     WhatsMyName dataset: https://github.com/WebBreacher/WhatsMyName

AUTHORS
     Written by gnomegl.

COPYRIGHT
     See LICENSE file in source distribution.

VERSION
     See internal/core/constants.go for version information.

usrsx                            October 2025                         USRSX(1)
