usrsx

Features

- Broad Site Coverage: Leverages the WhatsMyName dataset for extensive username enumeration
- Browser Impersonation: Simulate Chrome, Firefox, Safari, Edge for accurate detection
- Real-Time Console UI: Live progress tracking with Bubbletea
- Concurrent & Fast: High-speed concurrent checks using goroutines
- Fuzzy Matching: Optional fuzzy mode for broader username discovery
- Category Filters: Include or exclude sites by category
- Proxy Support: Single proxy or rotating proxy pool from file
- Self-Check Mode: Validate detection methods for reliability
- Export Results: Output to CSV, JSON, HTML, and text formats
- No Dependencies: Single binary executable

Installation

From Source

git clone https://github.com/gnomegl/usrsx.git
cd usrsx
go build -o usrsx cmd/usrsx/main.go

Using Go Install

go install github.com/gnomegl/usrsx/cmd/usrsx@latest

Usage

Basic Usage

Check a single username:

./usrsx -u john_doe

Check multiple usernames:

./usrsx -u user1 -u user2 -u user3

Advanced Options

Browser Impersonation

./usrsx -u john_doe --impersonate firefox

Available browsers: chrome, firefox, safari, edge, chrome_android, safari_ios

Proxy Support

Single proxy:
./usrsx -u john_doe --proxy http://proxy:8080
./usrsx -u john_doe --proxy socks5://127.0.0.1:1080

Proxy rotation from file:
# Create proxies.txt with one proxy per line
echo "http://proxy1:8080" > proxies.txt
echo "http://proxy2:8080" >> proxies.txt
echo "socks5://proxy3:1080" >> proxies.txt

./usrsx -u john_doe --proxy-file proxies.txt

Concurrency Control

./usrsx -u john_doe --max-tasks 100 --timeout 20

Category Filtering

# Include only specific categories
./usrsx -u john_doe --include-categories social,coding

# Exclude specific categories
./usrsx -u john_doe --exclude-categories adult,gaming

Export Results

# Export to multiple formats
./usrsx -u john_doe --csv --json --html

# Custom export paths
./usrsx -u john_doe --csv --csv-path results.csv

Self-Check Mode

Validate site detection accuracy:

./usrsx --self-check
./usrsx --self-check --show-details

Result Filtering

# Show all results (including not found)
./usrsx -u john_doe --filter-all

# Show only errors
./usrsx -u john_doe --filter-errors

# Show only found results (default behavior)
./usrsx -u john_doe

Complete Example

./usrsx <username> \
  --impersonate chrome \
  --proxy-file proxies.txt \
  --max-tasks 100 \
  --timeout 15 \
  --include-categories social,coding \
  --csv --json --html \
  --show-details

Command Line Options

Basic Options
Flag | Description
-u, --username | Username(s) to search for
-s, --site | Specific site name(s) to check
--no-color | Disable colored output
--no-progressbar | Disable progress bar
--version | Show version information

Input Lists
Flag | Description
--local-list | Path(s) to local JSON file(s)
--remote-list | URL(s) to fetch remote lists
--local-schema | Path to local schema file
--remote-schema | URL to fetch schema

Network Options
Flag | Description
--proxy | Proxy server URL
--proxy-file | File with proxies (one per line)
--timeout | Request timeout in seconds (default: 30)
--allow-redirects | Follow HTTP redirects
--verify-ssl | Verify SSL certificates
-i, --impersonate | Browser to impersonate (default: chrome)

Concurrency & Debug
Flag | Description
--max-tasks | Maximum concurrent tasks (default: 50)
--fuzzy | Enable fuzzy validation mode
--show-details | Show detailed output
--self-check | Run self-check mode

Export Options
Flag | Description
--csv | Export to CSV
--csv-path | Custom CSV path
--json | Export to JSON
--json-path | Custom JSON path
--html | Export to HTML
--html-path | Custom HTML path
--pdf | Export to text (PDF placeholder)
--pdf-path | Custom PDF path

Result Filters
Flag | Description
--filter-all | Show all results
--filter-errors | Show only errors
--filter-not-found | Show only not found
--filter-unknown | Show only unknown
--filter-ambiguous | Show only ambiguous

Configuration Files

Proxies File Format

Create a proxies.txt file with one proxy per line:

http://proxy1.example.com:8080
http://proxy2.example.com:8080
socks5://127.0.0.1:1080
# Comments are supported
https://user:pass@proxy3.example.com:3128

The tool will rotate through proxies automatically.

Performance Tips

1. Adjust Concurrency: Use --max-tasks to control concurrent requests. Higher values = faster but may trigger rate limiting
2. Increase Timeout: For slow networks, use --timeout 60 or higher
3. Use Proxy Rotation: Distribute load across multiple proxies with --proxy-file
4. Filter Categories: Focus on specific categories to reduce check time
5. Disable Progress Bar: Use --no-progressbar for slightly better performance

Architecture

usrsx/
├── cmd/usrsx/          # Main application entry point
├── internal/
│   ├── core/             # Core business logic
│   │   ├── checker.go    # Main username checker
│   │   ├── models.go     # Data models
│   │   ├── constants.go  # Constants
│   │   └── errors.go     # Error types
│   ├── client/           # HTTP client
│   │   └── http.go       # Client with proxy rotation
│   ├── cli/              # CLI components
│   │   ├── config.go     # Configuration
│   │   ├── exporters.go  # Export functionality
│   │   └── progress.go   # Progress tracking
│   └── utils/            # Utilities
│       └── validators.go # Validation functions
├── go.mod
└── README.md

Credits

- WhatsMyName dataset: WebBreacher/WhatsMyName
